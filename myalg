


echo 1 || echo 2 || echo 3 && echo 4 || echo 5 || echo 6 && echo 7

echo 1 || echo 2 || (echo 3 && echo 4) || echo 5 || echo 6 && echo 7

tokens:
	(
	)
	||
	&&
(echo) abc && cat

(echo 1 || echo 2 || echo 3) && (echo 4 || echo 5 || echo 6) && (echo 7)

------------------------------------------------------------
input: string
Result: string broken into tokens, in memory they are like string array


enum logical_tok_type{
	openpar = 1
	closepar = 2
	or = 3
	and = 4
	script = 5
}

struct t_logical_token{
	logical_tok_type	type;
	char				*string_representation; (NULL for all non-script ones)
	*next
}
------------------------------------------------------------
needs to stop:
&& failure
|| success
)

type:heredoc
terminator_string: ABC
content: NULL


echo < a.txt "hello" << ABC &&dflsfnlsfdsf

1 проход:
	отк скоб
	закр скоб
	&&
	||
	pipeline который включает в себя {cmd, pipesymbol,}
		при формировании пайплайна пробежаться по нему 
	
	
	проверить что в пайплайне нету:
		незакрытый << < > >>
		
	echo hello < a.txt hi > b.txt



struct higher_level_token
{
	enum e_higher_level_type type;
	lower_level_token *command; (spisok)
}

struct lower_level_token{
	char *stringrepr;
	e_lower_level_type type;
	
}

struct cmd {
	exec
	args
	infiles
	outfiles
}
	
2 проход:
	
